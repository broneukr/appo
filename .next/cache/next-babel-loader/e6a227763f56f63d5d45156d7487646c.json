{"ast":null,"code":"import { AuthenticationError, UserInputError } from 'apollo-server-micro';\nimport cookie from 'cookie';\nimport jwt from 'jsonwebtoken';\nimport getConfig from 'next/config';\nimport bcrypt from 'bcrypt';\nimport v4 from 'uuid/v4';\nconst JWT_SECRET = getConfig().serverRuntimeConfig.JWT_SECRET;\nconst users = [];\n\nfunction createUser(data) {\n  const salt = bcrypt.genSaltSync();\n  return {\n    id: v4(),\n    email: data.email,\n    hashedPassword: bcrypt.hashSync(data.password, salt)\n  };\n}\n\nfunction validPassword(user, password) {\n  return bcrypt.compareSync(password, user.hashedPassword);\n}\n\nexport const resolvers = {\n  Query: {\n    async viewer(_parent, _args, context, _info) {\n      var _context$req$headers$;\n\n      const {\n        token\n      } = cookie.parse((_context$req$headers$ = context.req.headers.cookie) !== null && _context$req$headers$ !== void 0 ? _context$req$headers$ : '');\n\n      if (token) {\n        try {\n          const {\n            id,\n            email\n          } = jwt.verify(token, JWT_SECRET);\n          return users.find(user => user.id === id && user.email === email);\n        } catch {\n          throw new AuthenticationError('Authentication token is invalid, please log in');\n        }\n      }\n    }\n\n  },\n  Mutation: {\n    async signUp(_parent, args, _context, _info) {\n      const user = createUser(args.input);\n      users.push(user);\n      return {\n        user\n      };\n    },\n\n    async signIn(_parent, args, context, _info) {\n      const user = users.find(user => user.email === args.input.email);\n\n      if (user && validPassword(user, args.input.password)) {\n        const token = jwt.sign({\n          email: user.email,\n          id: user.id,\n          time: new Date()\n        }, JWT_SECRET, {\n          expiresIn: '6h'\n        });\n        context.res.setHeader('Set-Cookie', cookie.serialize('token', token, {\n          httpOnly: true,\n          maxAge: 6 * 60 * 60,\n          path: '/',\n          sameSite: 'lax',\n          secure: true\n        }));\n        return {\n          user\n        };\n      }\n\n      throw new UserInputError('Invalid email and password combination');\n    },\n\n    async signOut(_parent, _args, context, _info) {\n      context.res.setHeader('Set-Cookie', cookie.serialize('token', '', {\n        httpOnly: true,\n        maxAge: -1,\n        path: '/',\n        sameSite: 'lax',\n        secure: true\n      }));\n      return true;\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}