{"ast":null,"code":"var _jsxFileName = \"D:\\\\DEV\\\\NEXT\\\\api-routes-apollo-server-and-client-auth\\\\pages\\\\about.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport App from '../components/App';\nimport Header from '../components/Header';\nexport default (() => __jsx(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 3\n  }\n}, __jsx(Header, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }\n}), __jsx(\"article\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }\n}, __jsx(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }\n}, \"The Idea Behind This Example\"), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 7\n  }\n}, __jsx(\"a\", {\n  href: \"https://www.apollographql.com/client/\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }\n}, \"Apollo\"), \" is a GraphQL \\u0418\\u0434\\u0435\\u044F, \\u0441\\u0442\\u043E\\u044F\\u0449\\u0430\\u044F \\u0437\\u0430 \\u044D\\u0442\\u0438\\u043C \\u043F\\u0440\\u0438\\u043C\\u0435\\u0440\\u043E\\u043C Apollo - \\u044D\\u0442\\u043E \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442 GraphQL, \\u043A\\u043E\\u0442\\u043E\\u0440\\u044B\\u0439 \\u043F\\u043E\\u0437\\u0432\\u043E\\u043B\\u044F\\u0435\\u0442 \\u043B\\u0435\\u0433\\u043A\\u043E \\u0437\\u0430\\u043F\\u0440\\u0430\\u0448\\u0438\\u0432\\u0430\\u0442\\u044C \\u0442\\u043E\\u0447\\u043D\\u044B\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 \\u0441 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430 GraphQL. \\u0412 \\u0434\\u043E\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u0438\\u0435 \\u043A \\u0438\\u0437\\u0432\\u043B\\u0435\\u0447\\u0435\\u043D\\u0438\\u044E \\u0438 \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044E \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445, Apollo \\u0430\\u043D\\u0430\\u043B\\u0438\\u0437\\u0438\\u0440\\u0443\\u0435\\u0442 \\u0432\\u0430\\u0448\\u0438 \\u0437\\u0430\\u043F\\u0440\\u043E\\u0441\\u044B \\u0438 \\u0438\\u0445 \\u0440\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442\\u044B, \\u0447\\u0442\\u043E\\u0431\\u044B \\u0441\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043A\\u044D\\u0448 \\u0432\\u0430\\u0448\\u0438\\u0445 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u043D\\u0430 \\u0441\\u0442\\u043E\\u0440\\u043E\\u043D\\u0435 \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0430, \\u043A\\u043E\\u0442\\u043E\\u0440\\u044B\\u0439 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u044F\\u0435\\u0442\\u0441\\u044F \\u043F\\u043E \\u043C\\u0435\\u0440\\u0435 \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u0438\\u044F \\u0434\\u0430\\u043B\\u044C\\u043D\\u0435\\u0439\\u0448\\u0438\\u0445 \\u0437\\u0430\\u043F\\u0440\\u043E\\u0441\\u043E\\u0432 \\u0438 \\u043C\\u0443\\u0442\\u0430\\u0446\\u0438\\u0439, \\u043F\\u043E\\u043B\\u0443\\u0447\\u0430\\u044F \\u0431\\u043E\\u043B\\u044C\\u0448\\u0435 \\u0440\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442\\u043E\\u0432 \\u0441 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430. \\u0412 \\u044D\\u0442\\u043E\\u043C \\u043F\\u0440\\u043E\\u0441\\u0442\\u043E\\u043C \\u043F\\u0440\\u0438\\u043C\\u0435\\u0440\\u0435 \\u043C\\u044B \\u0431\\u0435\\u0437 \\u043F\\u0440\\u043E\\u0431\\u043B\\u0435\\u043C \\u0438\\u043D\\u0442\\u0435\\u0433\\u0440\\u0438\\u0440\\u0443\\u0435\\u043C Apollo \\u0441 Next , \\u043E\\u0431\\u043E\\u0440\\u0430\\u0447\\u0438\\u0432\\u0430\\u044F \\u043D\\u0430\\u0448 \\u043A\\u043E\\u043C\\u043F\\u043E\\u043D\\u0435\\u043D\\u0442 Page \\u0432\\u043D\\u0443\\u0442\\u0440\\u0438 \\u043A\\u043E\\u043C\\u043F\\u043E\\u043D\\u0435\\u043D\\u0442\\u0430 \\u0432\\u044B\\u0441\\u0448\\u0435\\u0433\\u043E \\u043F\\u043E\\u0440\\u044F\\u0434\\u043A\\u0430 (HOC) . \\u0418\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u044F \\u0448\\u0430\\u0431\\u043B\\u043E\\u043D HOC, \\u043C\\u044B \\u043C\\u043E\\u0436\\u0435\\u043C \\u043F\\u0435\\u0440\\u0435\\u0434\\u0430\\u0442\\u044C \\u0446\\u0435\\u043D\\u0442\\u0440\\u0430\\u043B\\u044C\\u043D\\u043E\\u0435 \\u0445\\u0440\\u0430\\u043D\\u0438\\u043B\\u0438\\u0449\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u0440\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442\\u043E\\u0432 \\u0437\\u0430\\u043F\\u0440\\u043E\\u0441\\u0430, \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 Apollo, \\u0432 \\u043D\\u0430\\u0448\\u0443 \\u0438\\u0435\\u0440\\u0430\\u0440\\u0445\\u0438\\u044E \\u043A\\u043E\\u043C\\u043F\\u043E\\u043D\\u0435\\u043D\\u0442\\u043E\\u0432 React, \\u043E\\u043F\\u0440\\u0435\\u0434\\u0435\\u043B\\u0435\\u043D\\u043D\\u0443\\u044E \\u043D\\u0430 \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0435 \\u043D\\u0430\\u0448\\u0435\\u0433\\u043E \\u0441\\u043B\\u0435\\u0434\\u0443\\u044E\\u0449\\u0435\\u0433\\u043E \\u043F\\u0440\\u0438\\u043B\\u043E\\u0436\\u0435\\u043D\\u0438\\u044F. \\u041F\\u0440\\u0438 \\u043D\\u0430\\u0447\\u0430\\u043B\\u044C\\u043D\\u043E\\u0439 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0435 \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u044B, \\u043D\\u0430\\u0445\\u043E\\u0434\\u044F\\u0441\\u044C \\u043D\\u0430 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0435 \\u0438 \\u0432\\u043D\\u0443\\u0442\\u0440\\u0438 getInitialProps, \\u043C\\u044B \\u0432\\u044B\\u0437\\u044B\\u0432\\u0430\\u0435\\u043C \\u043C\\u0435\\u0442\\u043E\\u0434 Apollo, getDataFromTree . \\u042D\\u0442\\u043E\\u0442 \\u043C\\u0435\\u0442\\u043E\\u0434 \\u0432\\u043E\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u0442 \\u043E\\u0431\\u0435\\u0449\\u0430\\u043D\\u0438\\u0435; \\u0432 \\u043C\\u043E\\u043C\\u0435\\u043D\\u0442 \\u0440\\u0430\\u0437\\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u044F \\u043E\\u0431\\u0435\\u0449\\u0430\\u043D\\u0438\\u044F \\u043D\\u0430\\u0448 \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0441\\u043A\\u0438\\u0439 \\u043C\\u0430\\u0433\\u0430\\u0437\\u0438\\u043D Apollo \\u043F\\u043E\\u043B\\u043D\\u043E\\u0441\\u0442\\u044C\\u044E \\u0438\\u043D\\u0438\\u0446\\u0438\\u0430\\u043B\\u0438\\u0437\\u0438\\u0440\\u0443\\u0435\\u0442\\u0441\\u044F. \\u042D\\u0442\\u043E\\u0442 \\u043F\\u0440\\u0438\\u043C\\u0435\\u0440 \\u043E\\u043F\\u0438\\u0440\\u0430\\u0435\\u0442\\u0441\\u044F \\u043D\\u0430 graph.cool \\u0434\\u043B\\u044F \\u0435\\u0433\\u043E \\u0431\\u044D\\u043A\\u044D\\u043D\\u0434\\u0430 GraphQL.\"), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 7\n  }\n}, \"In this simple example, we integrate Apollo seamlessly with\", ' ', __jsx(\"a\", {\n  href: \"https://github.com/zeit/next.js\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }\n}, \"Next\"), \" by wrapping our Page component inside a\", ' ', __jsx(\"a\", {\n  href: \"https://facebook.github.io/react/docs/higher-order-components.html\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }\n}, \"higher-order component (HOC)\"), \". Using the HOC pattern we're able to pass down a central store of query result data created by Apollo into our React component hierarchy defined inside a page of our Next application.\"), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 7\n  }\n}, \"On initial page load, while on the server and inside getInitialProps, we invoke the Apollo method,\", ' ', __jsx(\"a\", {\n  href: \"https://www.apollographql.com/docs/react/api/react-ssr/#getdatafromtree\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }\n}, \"getDataFromTree\"), \". This method returns a promise; at the point in which the promise resolves, our Apollo Client store is completely initialized.\"), __jsx(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 7\n  }\n}, \"This example relies on \", __jsx(\"a\", {\n  href: \"http://graph.cool\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 32\n  }\n}, \"graph.cool\"), \" for its GraphQL backend.\"))));","map":{"version":3,"sources":["D:/DEV/NEXT/api-routes-apollo-server-and-client-auth/pages/about.js"],"names":["App","Header"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,mBAAhB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,gBAAe,MACb,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAG,EAAA,IAAI,EAAC,uCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,yoJAFF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEAC8D,GAD9D,EAEE;AAAG,EAAA,IAAI,EAAC,iCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,8CAGqB,GAHrB,EAIE;AAAG,EAAA,IAAI,EAAC,oEAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAJF,6LAbF,EAwBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yGAE4B,GAF5B,EAGE;AAAG,EAAA,IAAI,EAAC,yEAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHF,oIAxBF,EAiCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BACyB;AAAG,EAAA,IAAI,EAAC,mBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADzB,8BAjCF,CAFF,CADF","sourcesContent":["import App from '../components/App'\nimport Header from '../components/Header'\n\nexport default () => (\n  <App>\n    <Header />\n    <article>\n      <h1>The Idea Behind This Example</h1>\n      <p>\n        <a href=\"https://www.apollographql.com/client/\">Apollo</a> is a GraphQL\nИдея, стоящая за этим примером\nApollo - это клиент GraphQL, который позволяет легко запрашивать точные данные с сервера GraphQL. В дополнение к извлечению и изменению данных, Apollo анализирует ваши запросы и их результаты, чтобы создать кэш ваших данных на стороне клиента, который обновляется по мере выполнения дальнейших запросов и мутаций, получая больше результатов с сервера.\n\nВ этом простом примере мы без проблем интегрируем Apollo с Next , оборачивая наш компонент Page внутри компонента высшего порядка (HOC) . Используя шаблон HOC, мы можем передать центральное хранилище данных результатов запроса, созданных Apollo, в нашу иерархию компонентов React, определенную на странице нашего следующего приложения.\n\nПри начальной загрузке страницы, находясь на сервере и внутри getInitialProps, мы вызываем метод Apollo, getDataFromTree . Этот метод возвращает обещание; в момент разрешения обещания наш клиентский магазин Apollo полностью инициализируется.\n\nЭтот пример опирается на graph.cool для его бэкэнда GraphQL.\n      </p>\n      <p>\n        In this simple example, we integrate Apollo seamlessly with{' '}\n        <a href=\"https://github.com/zeit/next.js\">Next</a> by wrapping our Page\n        component inside a{' '}\n        <a href=\"https://facebook.github.io/react/docs/higher-order-components.html\">\n          higher-order component (HOC)\n        </a>\n        . Using the HOC pattern we're able to pass down a central store of query\n        result data created by Apollo into our React component hierarchy defined\n        inside a page of our Next application.\n      </p>\n      <p>\n        On initial page load, while on the server and inside getInitialProps, we\n        invoke the Apollo method,{' '}\n        <a href=\"https://www.apollographql.com/docs/react/api/react-ssr/#getdatafromtree\">\n          getDataFromTree\n        </a>\n        . This method returns a promise; at the point in which the promise\n        resolves, our Apollo Client store is completely initialized.\n      </p>\n      <p>\n        This example relies on <a href=\"http://graph.cool\">graph.cool</a> for\n        its GraphQL backend.\n      </p>\n    </article>\n  </App>\n)\n"]},"metadata":{},"sourceType":"module"}